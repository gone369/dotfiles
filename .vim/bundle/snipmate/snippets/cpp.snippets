# Read File Into Vector
snippet readfile
	std::vector<char> v;
	if (FILE *${2:fp} = fopen(${1:"filename"}, "r")) {
		char buf[1024];
		while (size_t len = fread(buf, 1, sizeof(buf), $2))
			v.insert(v.end(), buf, buf + len);
		fclose($2);
	}${3}
# std::map
snippet map
	std::map<${1:key}, ${2:value}> map${3};
# std::vector
snippet vector
	std::vector<${1:char}> ${2};
# Namespace
snippet ns
	namespace ${1:`Filename('', 'my')`} {
		${2}
	} /* $1 */
# Class
snippet cl
	class ${1:`Filename('$1_t', 'name')`} {
	public:
		$1 (${2:arguments});
		virtual ~$1 ();

	private:
		${3:/* data */}
	};
snippet constructor
	${1:classname}::$1(void){
		${2};
	}
snippet destructor
	${1:classname}::~$1(void){
		${2};
	}
snippet iter
	vector<${1:type}>::iterator it;
	for(vector<$1>::iterator it = ${2:vec_name}.begin(); it != $2.end(); ++it){
		${3}
	}
snippet include
	//#include		<algorithm>
	//#include		<cmath>
	//#include		<cstdbool>
	//#include		<cstddef>
	//#include		<cstdio>
	//#include		<cstdlib>
	//#include		<ctime>
	//#include		<array>
	//#include		<deque>
	//#include		<exception>
	//#include		<iterator>
	//#include		<list>
	//#include		<map>
	//#include		<queue>
	//#include		<random>
	//#include		<set>
	//#include		<stack>
	//#include		<string>
	//#include		<vector>
	//#include		<sstrream>
	//#include		<iostream>
	using	namespace	std;

snippet switch
	switch(${1:expression}){
		case	${2}:
			break;
		default:
	}

